[
["R.html", "Capítulo 2 El software R 2.1 ¿Qué es R? 2.2 Usando R: lo básico 2.3 Informes reproducibles", " Capítulo 2 El software R 2.1 ¿Qué es R? R es un lenguaje de programación creado por Robert Gentleman y Ross Ihaka en el año de 1992. Su intención consistio en hacer un lenguaje didáctico, para ser utilizado en un curso introductorio a la estadística en la Universidad de Nueva Zelanda. Ambos creadores le dieron el nombre de R al lenguaje implementado por las iniciales de sus nombres (a modo de broma). (#fig:Figura 1.1)Los creadores del Software R Robert Gentleman (a la derecha) y Ross Ihaka (a la izquierda). El lenguaje de programación R se puede obtener y distribuir de forma gratuita, debido a que se encuentra bajo Licencia Pública General del proyecto GNU. R es un programa de código abierto, gratis, y fruto del esfuerzo de miles de personas en todo el mundo que colaboran en su desarrollo. El proyecto GNU tuvo como propósito desarrollar un sistema operativo compatible con Unix que fuera software libre. Si desea conocer información sobre el mismo, consulte aquí por favor. (#fig:Figura 1.2)Encuentro en el useR! 2019. Este evento, realizado anualmente en todo el mundo, se considera como la principal reunión del lenguaje R. De hecho esta última característica del R es muy importante, puesto que al contar con una comunidad es posible dar con la solución de problemas de errores en programación (bugs), así como desarrollar paquetes modulares utilizados en temas específicos, desarrollados por personas con conocimiento variado en alguna parte del mundo. En la web hay todo tipo de información de interés acerca del R, como por ejemplo su instalación a través de la CRAN (Comprehensive R Archive Network). 2.2 Usando R: lo básico Si alguna vez ha leido sobre el R, se habra dado cuenta que una característica importante del mismo es que es un lenguaje de programación orientado a objetos. Los objetos son cosas, como un número, un conjunto de datos, una palabra, un resumen estadístico (como una media o varianza), entre otros. Que sea orientada a objetos quiere decir que R realiza acciones sobre esos objetos. 2.2.1 Algunos tipos de objetos en R (#fig:Figura 1.3)Los objetos en R vienen en muchas formas y tamaños, desde objetos simples como escalares (a la izquierda) hasta vectores (al centro) u objetos más complejos como conjuntos de datos (a la derecha). Escalares y vectores Los escalares y los vectores son el objeto más simple en R. Un objeto escalar es solo un único valor, mientras que los vectores corresponden a una combinación de varios escalares almacenados como un solo objeto. Hagamos dos objetos para ver esta diferencia: Objeto &lt;- [ ], esta es la forma de crear objetos en R. También se puede usar = para asignar (&lt;-) un elemento a un objeto; sin embargo es común en R usar &lt;-. Escalar &lt;- &#39;Humano&#39; print(Escalar) ## [1] &quot;Humano&quot; Vector &lt;- c(46, 38, 39, 60) print(Vector) ## [1] 46 38 39 60 Para crear un objeto con palabras o caracteres, basta con encerrar la cadena de caracteres dentro de comillas simples (’ ’) o dobles (&quot; &quot;). Miremos detalladamente el resultado anterior: Humano corresponde al contenido de “Escalar”, mientras que 46, 38, 39 y 60 es claramente el contenido de “Vector”. El hash doble (##) es la forma en como el R le indica que lo mostrado es una salida y no un código. [1] es la posición (o número de fila) del elemento dentro del objeto. Es importante tener en cuenta el tipo de un objeto, ya que esto determinará lo que se puede hacer con el mismo. Por ejemplo, no es posible realizar procedimientos matemáticos con un objeto de tipo carácter. Para averiguar el tipo de un objeto, se puede usar la función class. Por ejemplo: class(Vector) ## [1] &quot;numeric&quot; R gira en torno a dos cosas: objetos y funciones. Casi todo en R es un objeto o una función. De hecho, ya hemos visto dos funciones: class() y c()… c() es la forma más sencilla en R de crear un vector. Lo anterior es otra de las características importante del lenguaje de programación en R: es fuertemente tipado. Esto quiere decir que R no permite tratar a un objeto como si fuera de un tipo distinto al que tiene. Para ello, es necesario convertir de forma explícita dicho objeto al nuevo tipo previamente. Matrices y conjuntos de datos Las matrices y los conjuntos de datos son la extensión natural de los vectores. De hecho, se puede pensar en ello como una combinación de varios vectores. Veamos un ejemplo de una matriz: Especies &lt;- c(&#39;Humano&#39;, &#39;Cerdo&#39;, &#39;Perro&#39;, &#39;Vaca&#39;) Cromosomas &lt;- c(46, 38, 39, 60) cbind(Especies, Cromosomas) ## Especies Cromosomas ## [1,] &quot;Humano&quot; &quot;46&quot; ## [2,] &quot;Cerdo&quot; &quot;38&quot; ## [3,] &quot;Perro&quot; &quot;39&quot; ## [4,] &quot;Vaca&quot; &quot;60&quot; Con la función cbind() se puede crear una matriz combinando vectores. Aquí se combinan los vetores “Especies” y “Cromosomas”… claramente se puede observar que el número de cromosomas en cada especie puede variar, por ejemplo en el cerdo hay 38 cromosomas: 18 pares homólogos y un par de cromosomas sexuales. Si bien las matrices y los conjuntos de datos son muy similares, no son exactemente lo mismo. Las matrices pueden contener un solo tipo de datos (ya sea numérico o carácter), mientras los conjuntos de datos pueden contener columnas tanto numéricas como de caracteres. De hecho podra observar en el ejemplo anterior, que los elementos dentro de la columna Cromosomas, R los encerro dentro de comillas dobles (&quot; &quot;). Creemos un conjuntos de datos: data.frame( &#39;Especies&#39; = c(&#39;Humano&#39;, &#39;Cerdo&#39;, &#39;Perro&#39;, &#39;Vaca&#39;), &#39;Cromosomas&#39; = c(46, 38, 39, 60) ) ## Especies Cromosomas ## 1 Humano 46 ## 2 Cerdo 38 ## 3 Perro 39 ## 4 Vaca 60 La función data.frame() es muy similar a cbind(). La única diferencia es que con la primera función se debe especificar los nombres para cada una de las columnas a medida que las define. Al ser tan flexibles, la mayoría de los datos en el mundo real tienden a almacenarse como conjuntos de datos. La función str() permite saber el tipo de dato de cada columna en un conjunto de datos. ¡Por favor! intente averiguar el tipo de datos del conjunto de datos anteriormente creado. De click aquí por favor para dar con la solución: Solución: Base_datos &lt;- data.frame( &#39;Especies&#39; = c(&#39;Humano&#39;, &#39;Cerdo&#39;, &#39;Perro&#39;, &#39;Vaca&#39;), &#39;Cromosomas&#39; = c(46, 38, 39, 60) ) str(Base_datos) ## &#39;data.frame&#39;: 4 obs. of 2 variables: ## $ Especies : Factor w/ 4 levels &quot;Cerdo&quot;,&quot;Humano&quot;,..: 2 1 3 4 ## $ Cromosomas: num 46 38 39 60 La variable Especies dentro del objeto “Base_datos” es un factor, mientras que Cromosomas corresponde a tipo numérico. Luego, es posible extraer una parte de la base de datos anterior usando el signo dolar ($): Cromosomas &lt;- Base_datos$Cromosomas Cromosomas ## [1] 46 38 39 60 El signo dolar ($) se llama selector de componentes, y básicamente extrae una parte parte de un objeto. O bien, usando subíndices (denotados con llaves cuadradas ([ ])). Mediante este último es posibe seleccionar no solo columnas de bases de datos (como se hizo usando $), sino que también filas y valores individuales. Veamos un ejemplo de su uso: Base_datos[2, 2] ## [1] 38 Cada base de datos tiene una dirección capturada por su número de fila y columna. Tomando esto como base, es posible decirle al R que encuentre una parte de un objeto colocando el número de la fila y el número de la columna, ambos entre corchetes y separados por una coma (,). 2.2.2 Elaboración de gráficas Como ya hemos visto, R es un entorno especialmente diseñado para el tratamiento de datos. También para el desarrollo gráfico. De hecho una de las grandes virtudes del lenguaje de programación en R es la facilidad que ofrece el mismo para presentar la información correspondiente a los datos, de una manera gráfica. R dispone de varias funciones preparadas para la representación gráfica de los datos. Estas funciones se dividen en dos grandes grupos: Gráficos de alto nivel, los cuales crean un nuevo gráfico en la ventana de gráficos; Gráficos de bajo nivel, los cuales permiten añadir componentes (como líneas, puntos y etiquetas) a un gráfico ya existente. Aquí nos conformaremos en elaborar un simple gráfico de barras usando la función barplot(): Base_datos_2 &lt;- data.frame( &#39;Genotipo&#39; = c(&#39;AA&#39;, &#39;AA&#39;, &#39;Aa&#39;, &#39;aa&#39;, &#39;AA&#39;, &#39;Aa&#39;, &#39;Aa&#39;, &#39;aa&#39;, &#39;aa&#39;, &#39;AA&#39;, &#39;Aa&#39;, &#39;Aa&#39;, &#39;aa&#39;, &#39;AA&#39;, &#39;AA&#39;, &#39;Aa&#39;) ) Conteo &lt;- table(Base_datos_2$Genotipo) barplot(Conteo, main = &#39;Genotipos presentes en una pequeña población&#39;, xlab = &#39;Genotipos&#39;, ylab = &#39;Total de individuos&#39;) El argumento base del anterior gráfico es el nombre del vector que ira en el eje horizontal (x). Utilizando algunos argumentos adicionales, se puede mejorar la apariencia de la gráfica: con xlab y ylab se crean los títulos de ambos ejes y con main se puede definir un título principal. La mayoría de las funciones de graficación tienen gran cantidad de argumentos adicionales que puede usar para personalizar su gráfica. Para verlos todos puede ejecutar ?par en su consola de R. Tenga en cuenta que la mayor parte de las gráficas presentadas en este escrito seran realizadas utilizando el paquete ggplot2. Recomendamos enormemente su uso dado que dicho paquete permite realizar gráficas que además de ser bonitas, son fáciles de hacer. (#fig:Figura 1.4)ggplot2 es un sistema para crear gráficos, basado en la gramática de los gráficos. 2.3 Informes reproducibles Idealmente, un documento de investigación deberia contener además del texto resultante del estudio (como citas y paráfrasis de trabajos previos en la literatura), el código utilizado para generar las figuras y los estadísticos. A este tipo de documento se le conoce como informe reproducible, y esta característica (texto, código y estadísticos) es lo que los hace diferente a cualquier otro documento. (#fig:Figura 1.5)Normalmente, un informe reproducible contiene un código para la manipulación y análisis de sus datos, para la generación de las figuras usadas en el análisis exploratorio, junto al texto que constituye el centro del informe. Escribir un informe reproducible tiene numerosas ventajas, como por ejemplo: Aumenta la transparencia de su ciencia al automatizar la forma en como se generan sus figuras y estadísticos, y al compartir sus datos; Ayuda a mantener sincronizados sus resultados y los modelos utilizados; Brinda a las personas interesadas la posibilidad de acceder a su información, y a los diferentes enfoques y análisis que intentó antes de llegar a sus resultados finales. Cabe mencionar que hoy en día son muchas las personas que promueven su uso. Así mismo, algunas revistas de investigación en ocasiones requieren que sus datos y códigos esten diponibles para su publicación, o tal vez incluso otro investigador podra preguntar si puede usar los datos de su artículo publicado para reproducir sus hallazgos. 2.3.1 Informes reproducibles con R Markdown (#fig:Figura 1.6). "]
]
